include base
import times

# –¢—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –±–ª–æ–∫–Ω–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è—é—Ç—Å—è)
var savedData = newStringTable()

proc restore(peerId: string): string = 
  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–¥–∞—ë–º
  savedData.getOrDefault(peerId)

proc add(peerId: string, data: string) = 
  if savedData.hasKey(peerId):
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    savedData[peerId] &= data
  else:
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    savedData[peerId] = data

module "üìù –ë–ª–æ–∫–Ω–æ—Ç":
  command ["–±–ª–æ–∫–Ω–æ—Ç", "–±–ª–æ–∫–Ω–æ—Ç–∏–∫", "–¥–Ω–µ–≤–Ω–∏–∫"]:
    usage = ["–±–ª–æ–∫–Ω–æ—Ç –∑–∞–ø–∏—à–∏ <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ> - –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–ª–æ–∫–Ω–æ—Ç", 
             "–±–ª–æ–∫–Ω–æ—Ç –ø–æ–∫–∞–∂–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"]
    # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    if args.len < 1 or args[0] notin ["–ø–æ–∫–∞–∂–∏", "–∑–∞–ø–∏—à–∏"]:
      answer usage
      return
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–æ–º–∞–Ω–¥—É
    case args[0]
    of "–ø–æ–∫–∞–∂–∏":
      # –û—Ç–¥–∞—ë–º —Ç–æ, —á—Ç–æ —É –Ω–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏
      let data = restore($msg.pid)
      answer if data != "": data else: "–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –≤—Å–ø–æ–º–Ω–∏–ª"
    of "–∑–∞–ø–∏—à–∏":
      # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –∑–Ω–∞—á–∏—Ç –Ω–∞–º –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∞–º—É –∏–Ω—Ñ—É
      if args.len < 2:
        answer "–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–ª–æ–∫–Ω–æ—Ç?"
        return
      else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        let info = args[1..^1].join(" ")
        # –î–æ–±–∞–≤–ª—è–º –¥–∞–Ω–Ω—ã–µ
        add($msg.pid, &"\n\n{utils.getMoscowTime()} –ø–æ –ú–°–ö\n{info}")
        answer "–¢–∞–∞–∞–∞–∫... –í—Å—ë, –∑–∞–ø–∏—Å–∞–ª!"
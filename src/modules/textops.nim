include base
import unicode

const
  # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
  FlipTable = {"a": "…ê","b": "q", "c": "…î","d": "p", 
    "e": "«ù","f": "…ü", "g": "∆É", "h": "…•",
    "i": "ƒ±", "j": "…æ", "k": " û", "m": "…Ø",
    "n": "u", "p": "d", "q": "·ïπ", "r": "…π",
    "t": " á", "u": "n", "v": " å", "w": " ç",
    "y": " é", ".": "Àô", "[": "]", "(": ")",
    "]": "[", ")": "(", "{": "}", "}": "{",
    "?": "¬ø", "!": "¬°", "\"": ",", ",": "'",
    "<": ">", "_": "‚Äæ", "‚Äø": "‚ÅÄ", "‚ÅÖ": "‚ÅÜ",
    "‚à¥": "‚àµ", "\r": "\n", "–∞": "…ê", "–±": "∆ç",
    "–≤": " ö", "–≥": "…π", "–¥": "…ì", "—ë": "«ùÃ§",
    "–µ": "«ù", "–∂": "–∂", "–∑": "Œµ", "–∏": "–∏",
    "–π": "≈Ü", "–∫": " û", "–ª": "v", "–º": "w",
    "–Ω": "–Ω", "–æ": "–æ", "–ø": "u", "—Ä": "d", 
    "—Å": "…î","—Ç": "…Ø", "—É": " é", "—Ñ": "»∏", 
    "—Ö": "—Ö", "—Ü": "«π", "—á": "“∫", "—à": "m", 
    "—â": "m", "—ä": "q", "—ã": "ƒ±q", "—å": "q",
    "—ç": "—î", "—é": "oƒ±", "—è": " Å", "1": "∆ñ",
    "2": "·ÑÖ", "3": "∆ê", "4": "„Ñ£", "5": "œõ",
    "6": "9", "7": "„Ñ•", "8": "8", "9": "6", "0": "0"}.toTable()

# –°–æ–∑–¥–∞—ë–º –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∑–∞–¥
var tempTable {.compiletime.} = initTable[string, string]()

static:
  for k, v in FlipTable:
    tempTable[v] = k

const InvertedFlipTable = tempTable

module "üñä –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º":
  command "–ø–µ—Ä–µ—á–µ—Ä–∫–Ω–∏", "–∑–∞—á–µ—Ä–∫–Ω–∏":
    usage = "–∑–∞—á–µ—Ä–∫–Ω–∏ <—Å—Ç—Ä–æ–∫–∞> - –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É"
    if text == "":
      answer "–ø–µ—Ä–µ—á–µ—Ä–∫–Ω–∏ <—Å—Ç—Ä–æ–∫–∞> - –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É"
    else:
      var res = ""
      # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ UTF8 —Å–∏–º–≤–æ–ª–∞–º –≤ —Ç–µ–∫—Å—Ç–µ
      for x in text.utf8:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å–∏–º–≤–æ–ª + –¥–æ–ø. –∫–æ–¥—ã (–¥–ª—è –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è)
        res.add x & "&#38;#0822;"
      answer res
  
  command "–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏":
    usage = "–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏ <—Å—Ç—Ä–æ–∫–∞> - –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É"
    var data = ""
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ UTF8 —Å–∏–º–≤–æ–ª–∞–º
    for letter in unicode.toLower(text.reversed).utf8:
      # –ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ
      if letter in FlipTable: 
        data &= FlipTable.getOrDefault(letter)
      # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      elif InvertedFlipTable.hasKey(letter):
        data &= InvertedFlipTable[letter]
      # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º—É –±—É–∫–≤—É
      else:
        data &= letter
    answer data
    
  command "–ª–æ–ª":
    usage = "–ª–æ–ª <–∫–æ–ª-–≤–æ> - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–º–µ—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –ê–ó–•"
    const LolWord = "–ê–ó–•"
    
    try: answer LolWord.repeat(args[0].parseInt().clamp(5, 90))
    except: answer usage